DB='mongodb+srv://Achenson:<password>@mongo-for-fcc-13gh5.mongodb.net/graphql_test?retryWrites=true&w=majority'

^ <password> - without this angle brackets!

^graphql_test - name of the db that the document will we saved to! name of the collection will be infered automatically

GraphQLNonNull - preventing users from not entering all data in mutation

client -> clone from repo, then hidden folder .git was deleted so this could be one repo consisting of client and server

// useMutation mutate function does not call `onCompleted`!
 // so onCompleted can only be passed to initial hook
// workaround: useMutation returns a Promise

schema.js -> promise used, so that resolve function can return a value from Mongoose method,
which is needed on the pro

testing tokens with postman:
[body-graphql] 1. login querry to geneterate token, copy the token
2. [authorisation beaere token] paste token (without ""!)
3. make protected querry
no body-pareser being used





issues:
DONE 1. React: Login <Route> warning DONE
DONE 2. warning: SingleStat "key" DONE
DONE 3. problems with undefined for disable button itp? DONE (if statements moved to useEffect)
4. changePassword! other repos won't work!
DONE 5. clicking Login it the article is not loaded yet couse errors DONE
DONE 6. checking if email is already taken: is in Register component, but it would be better if it was in schema.js?
but problems with addingScore to user automatically DONE (partially checked in schema, partially on the frontend)
7. noCache in getStatsQuerry in Stats.js -> only temporary solution? https://github.com/apollographql/react-apollo/issues/2202


to do:
DONE 1. move graphql queries to different file DONE

DONE 2. set headers in apollo (index.js in client) DONE
DONE 3. context, req, res? DONE
4. login -> res send cookie with refresh token
(5. revoking tokens (at the end?) )
5. refresh token api route
6. persisiting session after refresh -> in the top of the App, refresh token will be used (migrating from apollo-boost!)
7. put secrets in .env file
8. [old problem?] changing stats don't change timer setting automatically.





apollo structure:

in App:
updating stats after counter reaches 0 -> passing addScore to  !!==updateScor_postAction==!!, where getStatsQuerry is refetched

in Stats:
getStatsQuery for setting redux state - stats state is being used in Stats for deleting (moved from App)
updating stats after deleting current stats, refetching getStatsQuery

in Register: adding new user and adding empty score right away (addNewUser_postAction not used anymore!)